/* tslint:disable */
/* eslint-disable */
/**
 * ReChunk API
 * API for managing chunks in the ReChunk project. Enables secure storage and retrieval of data chunks with project-based organization.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {mapValues} from '../runtime';
/**
 *
 * @export
 * @interface Project
 */
export interface Project {
  /**
   * Unique identifier for the project
   * @type {string}
   * @memberof Project
   */
  id?: string;
  /**
   * Read access key
   * @type {string}
   * @memberof Project
   */
  readKey?: string;
  /**
   * Write access key
   * @type {string}
   * @memberof Project
   */
  writeKey?: string;
  /**
   * Public key
   * @type {string}
   * @memberof Project
   */
  publicKey?: string;
  /**
   * Private key
   * @type {string}
   * @memberof Project
   */
  privateKey?: string;
  /**
   * Timestamp of project creation
   * @type {Date}
   * @memberof Project
   */
  createdAt?: Date;
  /**
   * Timestamp of last update
   * @type {Date}
   * @memberof Project
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the Project interface.
 */
export function instanceOfProject(value: object): value is Project {
  return true;
}

export function ProjectFromJSON(json: any): Project {
  return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Project {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    readKey: json['readKey'] == null ? undefined : json['readKey'],
    writeKey: json['writeKey'] == null ? undefined : json['writeKey'],
    publicKey: json['publicKey'] == null ? undefined : json['publicKey'],
    privateKey: json['privateKey'] == null ? undefined : json['privateKey'],
    createdAt:
      json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt:
      json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
  };
}

export function ProjectToJSON(value?: Project | null): any {
  if (value == null) {
    return value;
  }
  return {
    id: value['id'],
    readKey: value['readKey'],
    writeKey: value['writeKey'],
    publicKey: value['publicKey'],
    privateKey: value['privateKey'],
    createdAt:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
  };
}
