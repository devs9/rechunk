/* tslint:disable */
/* eslint-disable */
/**
 * ReChunk API
 * API for managing chunks in the ReChunk project. Enables secure storage and retrieval of data chunks with project-based organization.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {Project} from '../models/index';
import {ProjectFromJSON, ProjectToJSON} from '../models/index';

export interface GetProjectByIdRequest {
  projectId: string;
}

/**
 *
 */
export class ProjectsApi extends runtime.BaseAPI {
  /**
   * Creates a new project with generated security credentials
   * Create a new project
   */
  async createProjectRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Project>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/projects`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ProjectFromJSON(jsonValue),
    );
  }

  /**
   * Creates a new project with generated security credentials
   * Create a new project
   */
  async createProject(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Project> {
    const response = await this.createProjectRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get project details
   */
  async getProjectByIdRaw(
    requestParameters: GetProjectByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Project>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling getProjectById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ProjectFromJSON(jsonValue),
    );
  }

  /**
   * Get project details
   */
  async getProjectById(
    requestParameters: GetProjectByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Project> {
    const response = await this.getProjectByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
